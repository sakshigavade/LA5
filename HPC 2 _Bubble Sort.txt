#include <stdio.h>
#include <stdlib.h>
#include <omp.h>
#include <time.h>

// Sequential Bubble Sort
void bubbleSortSequential(int arr[], int n) {
    int temp;
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (arr[j] > arr[j + 1]) {
                temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }
}

// Optimized Parallel Bubble Sort
void bubbleSortParallel(int arr[], int n) {
    if (n < 2000) { // Use sequential if array size is small
        bubbleSortSequential(arr, n);
        return;
    }

    int temp;
    for (int i = 0; i < n; i++) {
        #pragma omp parallel for private(temp)
        for (int j = (i % 2 == 0) ? 0 : 1; j < n - 1; j += 2) {
            if (arr[j] > arr[j + 1]) {
                temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }
}

int main() {
    srand(time(0));
    omp_set_num_threads(4); // Set OpenMP to use 4 threads

    int n;
    printf("Enter the size of the array: ");
    scanf("%d", &n);

    int *arr1 = (int *)malloc(n * sizeof(int));
    int *arr2 = (int *)malloc(n * sizeof(int));

    // Generate random array
    for (int i = 0; i < n; i++) {
        arr1[i] = rand() % 1000;
        arr2[i] = arr1[i];
    }

    double start_time, end_time;

    // Sequential Bubble Sort
    start_time = omp_get_wtime();
    bubbleSortSequential(arr1, n);
    end_time = omp_get_wtime();
    double bubbleSortSeqTime = end_time - start_time;

    // Parallel Bubble Sort
    start_time = omp_get_wtime();
    bubbleSortParallel(arr2, n);
    end_time = omp_get_wtime();
    double bubbleSortParTime = end_time - start_time;

    // Calculate speedup and efficiency
    double speedup = bubbleSortSeqTime / bubbleSortParTime;
    double efficiency = speedup / 4; // 4 threads

    // Print results
    printf("\nBubble Sort Sequential Time: %f seconds", bubbleSortSeqTime);
    printf("\nBubble Sort Parallel Time: %f seconds", bubbleSortParTime);
    printf("\nSpeedup: %f", speedup);
    printf("\nEfficiency: %f\n", efficiency);

    free(arr1);
    free(arr2);

    return 0;
}

#gcc -fopenmp bubble_sort.c -o bubble_sort
#./bubble_sort
