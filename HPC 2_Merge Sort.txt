#include <stdio.h>
#include <stdlib.h>
#include <omp.h>

// Merge two halves
void merge(int arr[], int left, int mid, int right) {
    int n1 = mid - left + 1, n2 = right - mid;
    int *L = (int *)malloc(n1 * sizeof(int));
    int *R = (int *)malloc(n2 * sizeof(int));

    for (int i = 0; i < n1; i++) L[i] = arr[left + i];
    for (int i = 0; i < n2; i++) R[i] = arr[mid + 1 + i];

    int i = 0, j = 0, k = left;
    while (i < n1 && j < n2) arr[k++] = (L[i] <= R[j]) ? L[i++] : R[j++];
    while (i < n1) arr[k++] = L[i++];
    while (j < n2) arr[k++] = R[j++];

    free(L);
    free(R);
}

// Sequential Merge Sort
void mergeSortSequential(int arr[], int left, int right) {
    if (left < right) {
        int mid = left + (right - left) / 2;
        mergeSortSequential(arr, left, mid);
        mergeSortSequential(arr, mid + 1, right);
        merge(arr, left, mid, right);
    }
}

// Parallel Merge Sort
void mergeSortParallel(int arr[], int left, int right) {
    if (right - left < 2000) {
        mergeSortSequential(arr, left, right);
        return;
    }

    int mid = left + (right - left) / 2;
    #pragma omp parallel sections
    {
        #pragma omp section
        mergeSortParallel(arr, left, mid);

        #pragma omp section
        mergeSortParallel(arr, mid + 1, right);
    }

    merge(arr, left, mid, right);
}

int main() {
    omp_set_num_threads(4); // Use 4 threads

    int n;
    printf("Enter the size of the array: ");
    scanf("%d", &n);

    int *arr1 = (int *)malloc(n * sizeof(int));
    int *arr2 = (int *)malloc(n * sizeof(int));

    // Generate random array
    for (int i = 0; i < n; i++) {
        arr1[i] = rand() % 1000;
        arr2[i] = arr1[i];
    }

    double start_time, end_time;

    // Sequential Merge Sort
    start_time = omp_get_wtime();
    mergeSortSequential(arr1, 0, n - 1);
    end_time = omp_get_wtime();
    double seqTime = end_time - start_time;

    // Parallel Merge Sort
    start_time = omp_get_wtime();
    mergeSortParallel(arr2, 0, n - 1);
    end_time = omp_get_wtime();
    double parTime = end_time - start_time;

    // Speedup and Efficiency
    double speedup = seqTime / parTime;
    double efficiency = speedup / 4;

    // Print results
    printf("\nMerge Sort Sequential Time: %f seconds", seqTime);
    printf("\nMerge Sort Parallel Time: %f seconds", parTime);
    printf("\nSpeedup: %f", speedup);
    printf("\nEfficiency: %f\n", efficiency);

    free(arr1);
    free(arr2);

    return 0;
}

#gcc -fopenmp merge_sort.c -o merge_sort
#./merge_sort


